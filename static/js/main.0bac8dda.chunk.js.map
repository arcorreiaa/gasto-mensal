{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","Footer","h3","categories","food","title","color","expense","rent","salary","items","formatDate","date","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","category","value","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","Date","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bac8dda.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div``;\n\nexport const Header = styled.div`\n  background-color: #24292F;\n  height: 150px;\n  text-align: center;\n`;\n\nexport const HeaderText = styled.h1`\n  margin: 0;\n  padding: 0;\n  color: #FFF;\n  padding-top: 30px;\n`;\n\nexport const Body = styled.div`\n  margin: auto;\n  max-width: 980px;\n  margin-bottom: 50px;\n`;\n\nexport const Footer = styled.h3`\n  text-align: center;\n\n\n  a{\n    text-decoration: none;\n    color: #24292F;\n  }\n`;","import { Category } from '../types/Category';\n\nexport const categories: Category = {\n    food: { title: 'Alimentação', color: 'red', expense: true },\n    rent: { title: 'Aluguel', color: 'darkblue', expense: true },\n    salary: { title: 'Salário', color: 'green', expense: false }\n}","import { Item } from '../types/Item';\n\nexport const items: Item[] = [\n   /*\n    { date: new Date(2021, 9, 27), category: 'food', title: 'Bobs', value: 20.50 },\n    { date: new Date(2021, 9, 27), category: 'food', title: 'MilkShake', value: 32.50 },\n    { date: new Date(2021, 9, 27), category: 'rent', title: 'Aluguel', value: 250.50 },\n    { date: new Date(2021, 10, 14), category: 'salary', title: 'Salário', value: 300 },\n    */\n];","import { Item } from '../types/Item';\n\nexport const getCurrentMonth = () => {\n    let now = new Date();\n    return `${now.getFullYear()}-${now.getMonth()+1}`;\n}\n\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\n    let newList : Item[] = [];\n    let [year, month] = date.split('-');\n\n    for(let i in list) {\n        if(\n          list[i].date.getFullYear() === parseInt(year) &&\n          (list[i].date.getMonth()+1) === parseInt(month)\n        ) {\n            newList.push(list[i]);\n        }\n    }\n\n\n    return newList;\n}\n\nexport const formatDate = (date: Date): string => {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();   \n\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\n}\n\nconst addZeroToDate = (n: number): string => {\n    if(n <10) {\n        return `0${n}`;\n    } else {\n        return `${n}`;\n    }\n}\n\nexport const formatCurrentMonth = (currentMonth: string): string => {\n    let [year, month] = currentMonth.split('-');\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n        return `${months[parseInt(month) -1 ]} de ${year}`\n}","import styled from \"styled-components\";\n\nexport const Table = styled.table`\n    width: 100%;\n    background-color: #FFF;\n    padding: 20px;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    margin-top: 20px;\n`;\n\nexport const TableHeadColumn = styled.th<{ width?: number }>`\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\n    padding: 10px 0;\n    text-align: left;\n`;","import styled from \"styled-components\";\n\nexport const TableLine =  styled.tr``;\n\nexport const TableColumn = styled.td`\n  padding: 10px 0;\n`;\n\nexport const Category = styled.div<{ color: string }>`\n    display: inline-block;\n    pading: 5px 10px;\n    border-radius: 5px;\n    color #FFF;\n    background-color: ${props => props.color};\n`;\n\nexport const Value = styled.div<{ color: string }>`\n    color: ${props => props.color};\n`;","import * as C from './styles';\nimport { Item } from '../../types/Item';\nimport { formatDate } from '../../helpers/dateFilter';\nimport { categories } from '../../data/categories';\n\ntype Props = {\n    item: Item\n}\n\nexport const TableItem = ({ item }: Props) => {\n    return (\n        <C.TableLine>\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\n            <C.TableColumn>\n                <C.Category  color={categories[item.category].color}>   \n                    {categories[item.category].title}\n                </C.Category>\n\n            </C.TableColumn>\n            <C.TableColumn>{item.title}</C.TableColumn>\n            <C.TableColumn>\n                <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\n                    R$ {item.value}\n                </C.Value>\n            </C.TableColumn>\n        </C.TableLine>\n    );\n}","import * as C from './styles';\nimport { Item } from '../../types/Item'\nimport { TableItem } from '../TableItem';\n\ntype Props = {\n  list: Item[]\n}\n\nexport const TableArea = ({ list }: Props) => {\n    return (\n        <C.Table>\n          <thead>\n              <tr>\n                  <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\n                  <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\n                  <C.TableHeadColumn>Título</C.TableHeadColumn>\n                  <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\n \n              </tr>\n          </thead>\n          <tbody>\n              {list.map((item, index)=>(\n                  <TableItem key={index} item={item} />\n              ))}\n          </tbody>\n        </C.Table>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: -40px;\n    dispay: flex;\n    align-items: center;\n`;\n\nexport const MonthArea = styled.div`\n    flex: 1;\n    display: flex;\n    align-items: center;\n`;\n\nexport const MonthArrow = styled.div`\n    width: 40px;\n    text-align: center;\n    font-size: 40px;\n    cursor: pointer;\n`;\n\nexport const MonthTitle = styled.div`\n    flex: 1;\n    text-align: center;\n`;\n\nexport const ResumeArea = styled.div`\n    flex: 2;\n    display: flex;\n`;","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    flex: 1;\n`;\n\nexport const Title =  styled.div`\n    text-align: center;\n    font-weight: bold;\n    color: #888;\n    magin-top: 10px;\n    margin-bottom: 5px;\n`;\n\nexport const Info = styled.div<{ color?: string }>`\n    text-align: center;\n    font-weight: bold;\n    color: ${props => props.color ?? '#000'};\n`;","import  * as C from './styles';\n\ntype Props = {\n  title: string;\n  value: number;\n  color?: string;\n}\n\nexport const ResumeItem = ({ title, value, color }: Props) => {\n  return (\n      <C.Container>\n        <C.Title>{title}</C.Title>\n        <C.Info color={color}>R$ {value}</C.Info>\n      </C.Container>\n  );\n}","import * as C from './styles';\nimport { formatCurrentMonth } from '../../helpers/dateFilter';\nimport { ResumeItem } from '../ResumeItem';\n\ntype Props = {\n    currentMonth: string;\n    onMonthChange: (newMonth: string) => void;\n    income: number;\n    expense: number;\n}\n\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense }: Props) => {\n\n    const handlePrevMonth = () => {\n        let [year, month] = currentMonth.split('-');\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n        currentDate.setMonth( currentDate.getMonth() - 1 ); \n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n    }\n\n    const handleNextMonth = () => {\n      let [year, month] = currentMonth.split('-');\n      let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n      currentDate.setMonth( currentDate.getMonth() + 1 ); \n      onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\n\n    }\n\n    return (\n        <C.Container>\n          <C.MonthArea>\n              <C.MonthArrow onClick={handlePrevMonth}> 🡸 </C.MonthArrow>\n              <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\n              <C.MonthArrow onClick={handleNextMonth}> 🡺 </C.MonthArrow>\n          </C.MonthArea>\n          <C.ResumeArea>\n              <ResumeItem  title=\"Receita\" value={income} /> \n              <ResumeItem  title=\"Despesas\" value={expense} /> \n              <ResumeItem  \n                title=\"Balanço\" \n                value={income - expense} \n                color={(income - expense) < 0 ? 'red' : 'green'}\n              /> \n          </C.ResumeArea>\n        </C.Container>\n    );\n} ","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    min-width: 200px;\n    background-color: #FFF;\n    box-shadow: 0px 0px 5px #CCC;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 20px;\n    display: flex;\n    align-items: center;\n\n`;\nexport const InputLabel = styled.label`\n    flex: 1;\n    margin: 10px;\n`;\nexport const InputTitle = styled.div`\n    display: flex;\n    font-weight: bold;\n    margin-bottom: 5px;\n`;\nexport const Input = styled.input`\n    display: flex;\n    width: 100%;\n    min-width: 20%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Select = styled.select`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n`;\nexport const Button = styled.button`\n    width: 100%;\n    height: 30px;\n    padding: 0 5px;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n    background-color: lightblue;\n    color: black;\n    cursor: pointer;\n    &:hover {\n        background-color: blue;\n        color: white;\n    }\n`;","import { useState } from 'react';\nimport * as C from './styles';\nimport { Item } from '../../types/Item';\n\nimport { categories } from '../../data/categories';\n\ntype Props = {\n  onAdd: (item: Item) => void;\n};\n\nexport const InputArea = ({ onAdd }: Props) => {\n  const [dateField, setDateField] = useState('');\n  const [categoryField, setCategoryField] = useState('');\n  const [titleField, setTitleField] = useState('');\n  const [valueField, setValueField] = useState(0);\n\n  let categoryKeys: string[] = Object.keys(categories);\n\n  const handleAddEvent = () => {\n    let errors: string[] = [];\n\n    if(isNaN(new Date(dateField).getTime())) {\n      errors.push('Data inválida!');\n    }\n    if(!categoryKeys.includes(categoryField)) {\n      errors.push('Categoria inválida!');\n    }\n    if(titleField === '') {\n      errors.push('Título vazio!');\n    }\n    if(valueField <= 0) {\n      errors.push('Valor inválido!');\n    }\n\n    if(errors.length > 0) {\n      alert(errors.join(\"\\n\"));\n    } else {\n      onAdd({\n        date: new Date(dateField),\n        category: categoryField,\n        title: titleField,\n        value: valueField\n      });\n      clearFields();\n    }\n  }\n\n  const clearFields = () => {\n    setDateField('');\n    setCategoryField('');\n    setTitleField('');\n    setValueField(0);\n  }\n\n  return (\n      <C.Container>\n        <C.InputLabel>\n          <C.InputTitle>Data</C.InputTitle>\n          <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Categoria</C.InputTitle>\n          <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\n            <>\n              <option></option>\n              {categoryKeys.map((key, index) => (\n                <option key={index} value={key}>{categories[key].title}</option>\n              ))}\n            </>\n          </C.Select>\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Título</C.InputTitle>\n          <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>Valor</C.InputTitle>\n          <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\n        </C.InputLabel>\n        <C.InputLabel>\n          <C.InputTitle>&nbsp;</C.InputTitle>\n          <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\n        </C.InputLabel>\n      </C.Container>\n  );\n}","import { useState, useEffect } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/Item';\nimport { Category } from './types/Category';\nimport { categories } from './data/categories';\nimport { items } from './data/items';\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter';\nimport { TableArea } from './components/TableArea';\nimport { InfoArea } from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\nconst App = () => {\n    const [list, setList] = useState(items);\n    const [filteredList, setFilteredList] = useState<Item[]>([]);\n    const [currentMonth, setCurrentMonth] = useState(getCurrentMonth());\n    const [income, setIncome] = useState(0);\n    const [expense, setExpense] = useState(0);\n\n    useEffect(()=>{\n      setFilteredList( filterListByMonth(list, currentMonth) );\n    }, [list, currentMonth]);\n\n    useEffect(()=>{\n        let incomeCount = 0;\n        let expenseCount = 0;\n\n        for(let i in filteredList) {\n          if(categories[filteredList[i].category].expense) {\n            expenseCount += filteredList[i].value;\n          } else {\n            incomeCount += filteredList[i].value;\n          }\n        }\n\n        setIncome(incomeCount);\n        setExpense(expenseCount);\n    }, [filteredList]);\n\n    const handleMonthChange = (newMonth: string) => {\n        setCurrentMonth(newMonth);\n    }\n\n    const handleAddItem = (item: Item) => {\n      let newList = [...list];\n      newList.push(item);\n      setList(newList);\n    }\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Gasto Mensal</C.HeaderText>\n      </C.Header>\n      <C.Body>\n\n        <InfoArea  \n        currentMonth={currentMonth}\n        onMonthChange={handleMonthChange}\n        income={income}\n        expense={expense}\n        />\n\n        <InputArea onAdd={handleAddItem} />\n\n\n        <TableArea list={filteredList} /> \n\n      </C.Body>\n      <C.Footer>\n        <a href=\"https://www.instagram.com/arcoofc/\">Alysson Correia</a>\n      </C.Footer>\n    </C.Container>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}